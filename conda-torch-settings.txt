"""condarc
channels:
  - conda-forge
  - defaults

# When True,
# conda updates itself any time a user updates or installs a package
# in the root environment. When False, conda updates itself only
# if the user manually issues a conda update command. The default is True.
auto_update_conda: false

#default_channels:
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
"""

All settings:
    https://conda.io/projects/conda/en/latest/user-guide/configuration/settings.html

Useful settings:
    pkgs_dir
    envs_dir
To get their calculated values:
    conda config --show         # get all
    conda config --show pkgs_dirs envs_dirs


1) Download Miniconda from [recommend Python 3.10 bundle]:
  -> https://docs.conda.io/en/latest/miniconda.html#linux-installers
  -> https://repo.anaconda.com/miniconda/
2) Activate and check Python version
3) Install core libraries:
  => matplotlib pandas numpy scipy Cython notebook
  => openbabel rdkit
  #=> additional libraries: networkx tensorboard
  => mdtraj pymbar biopython
  => seaborn lxml
  => fortls (vscode fortran)
  => docutils esbonio sphinx-rtd-theme (vscode reStructedText)
  => python-graphviz (travis plot command `dot`)

4) Link those core libraries to other envs by using file `zz.pth`

5) Create new environment for `PyTorch`
  -> https://pytorch.org/get-started/locally/
  -> https://pytorch.org/get-started/previous-versions/

  !! Be aware, `cudatoolkit` works as 3rd-party package,
  !! while, `cuda-toolkit` contains `nvcc` compiler and header libraries,
  !! check pacakge on: https://anaconda.org/

  Use hardware brand get Compute Capability (Geforce GT 730 -> cc3.5 -> nvidia-driver-470 [last version])
  -> https://en.wikipedia.org/wiki/CUDA
  => then get CUDA SDK version (Software Development Kit, same as CUDAToolkit)

  For cudatoolkit, check version relations with CUDA, as well as the Driver version
  -> https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html


  Alternative way:
    >>> sudo apt install nvidia-driver-470          # check every library, make sure all is "470"
    >>> conda install pytorch  cudatoolkit=11.4     # make sure `pytorch` is CUDA version
    
    # refer "a)" and "b)" to get correct installed versions
    >>> pip install torch_scatter torch_sparse torch_cluster torch_spline_conv \
            -f https://data.pyg.org/whl/torch-1.13.1+cu112.html
    # be aware, `/bin/gcc` and `/bin/g++` version, the last compiler version for CUDA 11.4 is `9`
    #>>> sudo apt install gcc-9 g++-9
    #>>> sudo rm -f /bin/gcc /bin/g++ 
    #>>> sudo ln -s /bin/gcc-9 /bin/gcc  &&  sudo ln -s /bin/g++-9 /bin/g++
    # moniter the background processes, will take way too long time
    # when done, restore system compiler version
    >>> pip install torch_geometric


  !! aware: comptible GCC should be installed for NVCC
  !! check: https://developer.nvidia.com/cuda-toolkit-archive           # online documentation
  @@ https://docs.nvidia.com/cuda/archive/X.Y.i/#installation-guides    # for detail

  CUDA Toolkit Driver, to use CUDA version find correct driver (download "RUN" file:
  -> https://developer.nvidia.com/cuda-toolkit-archive  # Or

  >> conda install pytorch=1.11=cuda102py310hdf4a2db_202    # pkg=<version>=<build>
  Be aware, PyTorch version has the restriction on python version, check:
  -> https://conda.anaconda.org/pytorch/linux-64
  -> https://conda.anaconda.org/pytorch/noarch
  -> https://conda.anaconda.org/nvidia/linux-64
  -> https://conda.anaconda.org/nvidia/noarch
  -> https://conda.anaconda.org/conda-forge/linux-64
  -> https://conda.anaconda.org/conda-forge/noarch
  Search for build:
  >> conda search pytorch

  *) install `torch_geometric` by `pip`
  
  a) Get Torch version:
    -> python -c "import torch; print(torch.__version__)"   # output: 1.11.0.post202
  b) Get CUDA Version:
    -> python -c "import torch; print(torch.version.cuda); torch.zeros(2).cuda()"  # output: 10.2
  c) Find url from: https://data.pyg.org/whl/
    -> Torch and CUDA version info are composed by `torch-1.11.0+cu102`,
    -> thus, link: https://data.pyg.org/whl/torch-1.11.0+cu102.html

  """
  pip install torch_scatter torch_sparse torch_cluster torch_spline_conv \
      -f https://data.pyg.org/whl/torch-1.11.0+cu102.html
  pip install torch_geometric

  DO CHECK after!
  Note: torch_geometric>2.3.0 can only be used for PyTorch>1.12, otherwise, use 2.2.0 instead
  link: https://github.com/pyg-team/pytorch_geometric/discussions/7033
  """

  add to `~/.local/lib/pythonX.y/site-packages`, then results for `sys.path` will be:
    $CONDA_PREFIX/lib/python39.zip
    $CONDA_PREFIX/lib/python3.9
    $CONDA_PREFIX/lib/python3.9/lib-dynload
    $HOME/.local/lib/python3.9/site-packages
    ADDED_PATH      # <- added path, see PEP-370, thus they are in higher priority
    $CONDA_PREFIX/lib/python3.9/site-packages
  where `CONDA_PREFIX` is `$HOME/Applications/miniconda3/envs/x`

6) codes for test:
python3 -c 'import torch; torch.zeros(2).cuda(); from torch_geometric.data import Data'

7) envs "utils": (gcc/g++ will be installed by cuda-nvcc, add to $PATH)
"""
# aware:
# to install specific complier, e.g. `cuda-nvcc`, check: https://anaconda.org/nvidia/repo
# major version between `nvcc` and `gcc` should be compatible with each other
conda install cuda-toolkit cuda-nvcc -c nvidia
# specify the version, important!
conda install cuda-toolkit=12.4 cuda-nvcc=12.4    cuda-crt=12.4 \
    cuda-compiler=12.4 cuda-cudart=12.4 cuda-cudart-static=12.4 -c nvidia
# CUDA_TOOLKIT_INCLUDE: useful args in `cmake` to find non-standard installed GPUs
# CUDA_BIN_PATH / CUDA_TOOLKIT_ROOT_DIR : same as above
# NVCC_PREPEND_FLAGS:   useful to add `NVCC_FLAGS` when `nvcc` compiling

conda install boost cmake make
# if any errors encounter in `cmake`, debug: `cmake --debug-out ARGS`



# for gcc/g++
conda install gcc gxx

# for gfortran (compiler only)
conda install gfortran_impl_linux-64

# for mpi
conda install mpich
"""
## caution: new envs
## be extremely care on `NVCC_` variables
# ADDR2LINE  AR  AS  NM   RNALIB  BUILD
# CC  CC_FOR_BUILD  CFLAGS
# CMAKE_ARGS  CMAKE_PREFIX_PATH
# CPP  CPPFLAGS  CXX  CXXFILT  CXXFLAGS  CXX_FOR_BUILD
# GCC  GCC_AR  GCC_NM  GCC_RANLIB  GXX
# LD  LDFLAGS  LD_GOLD
# NVCC_PREPEND_FLAGS

# general case, say, undefined `memcpy@GLIBC_2.14`
# check: strings /path/to/libc.so | grep GLIBC
# update: `conda install sysroot_linux-64=2.17`


```
pytorch               1.11.0        cuda102py38hfdb21e3_202   conda-forge
torchvision           0.12.0        cuda102py38h6ac7867_1     conda-forge
cudatoolkit           10.2.89       hdec6ad0_12               conda-forge

torch-cluster         1.6.1         pypi_0                    pypi
torch-geometric       2.3.0         pypi_0                    pypi
torch-scatter         2.1.1         pypi_0                    pypi
torch-sparse          0.6.14        pypi_0                    pypi  # <- changed! initial is 0.6.17
torch-spline-conv     1.2.2         pypi_0                    pypi

tensorboard           2.14.0        pyhd8ed1ab_0              conda-forge
```


```
pytorch               1.13.1       cuda112py310he33e0d6_200   conda-forge
torchvision           0.14.1       cuda112py310hb1d1f80_1     conda-forge
cudatoolkit           11.4.3       h39f8164_13                conda-forge

torch-cluster         1.6.3        pypi_0                     pypi
torch-geometric       2.6.1        pypi_0                     pypi
torch-scatter         2.1.2        pypi_0                     pypi
torch-sparse          0.6.18       pypi_0                     pypi
torch-spline-conv     1.2.2        pypi_0                     pypi

tensorboard           2.18.0       pyhd8ed1ab_0               conda-forge
```



"""
# starting from `22.9.0`, ending by `4.14.0`, "CalVer" (Calendar Version)
# is used for version number: https://calver.org/
# in the format: YY.MM.x
Conda version       Base Python

4.7.12              2.7.17
4.10.3              3.9.7
4.10.3              3.7.7
4.12.0              3.9.12
4.14.0              3.7.12
22.9.0              3.7.12
22.9.0              3.9.13
22.9.0              3.7.16
23.1.0              3.7.13
23.1.0              3.9.12
23.1.0              3.10.9
23.3.1              3.10.10
23.5.2              3.8.17
23.7.4              3.9.18
23.11.0             3.8.18
24.1.2              3.10.13
24.9.2              3.10.15


# to avoid time cost on downloading, put the corresponding package under
# `conda info` --> "package cache"
"""


