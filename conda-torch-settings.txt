"""condarc
channels:
  - conda-forge
  - defaults

# When True,
# conda updates itself any time a user updates or installs a package 
# in the root environment. When False, conda updates itself only 
# if the user manually issues a conda update command. The default is True.
auto_update_conda: false

#default_channels:
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
#  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
"""

All settings:
    https://conda.io/projects/conda/en/latest/user-guide/configuration/settings.html

Useful settings:
    pkgs_dir
    envs_dir
To get their calculated values:
    conda config --show         # get all
    conda config --show pkgs_dirs envs_dirs


1) Download Miniconda from:
  -> https://docs.conda.io/en/latest/miniconda.html#linux-installers
  -> https://repo.anaconda.com/miniconda/
2) Activate and check Python version
3) Install core libraries:
  => matplotlib pandas numpy scipy Cython notebook
  => openbabel rdkit
  => fortls (vscode fortran)
  => docutils esbonio sphinx-rtd-theme (vscode reStructedText)

4) Link those core libraries to other envs by using file `zz.pth`

5) Create new environment for `PyTorch`
  -> https://pytorch.org/get-started/locally/
  -> https://pytorch.org/get-started/previous-versions/

  => additional libraries: networkx tensorboard cudatoolkit
  !! Be aware, `cudatoolkit` works as 3rd-party package,
  !! while, `cuda-toolkit` contains `nvcc` compiler and header libraries,
  !! check pacakge on: https://anaconda.org/

  CUDA Toolkit Driver:
  -> https://developer.nvidia.com/cuda-toolkit-archive
  
  For cudatoolkit, check version relations with CUDA:
  -> https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html
  
  *) install `torch_geometric` by `pip`
  
  a) Get Torch version: 
    -> python -c "import torch; print(torch.__version__)"   # output: 1.11.0.post202
  b) Get CUDA Version:
    -> python -c "import torch; print(torch.version.cuda)"  # output: 10.2
  c) Find url from: https://data.pyg.org/whl/
    -> Torch and CUDA version info are composed by `torch-1.11.0+cu102`,
    -> thus, link: https://data.pyg.org/whl/torch-1.11.0+cu102.html

  """
  pip install torch_scatter torch_sparse torch_cluster torch_spline_conv \
      -f https://data.pyg.org/whl/torch-1.11.0+cu102.html

  DO CHECK after!
  Note: torch_geometric>2.3.0 can only be used for PyTorch>1.12, otherwise, use 2.2.0 instead
  link: https://github.com/pyg-team/pytorch_geometric/discussions/7033
  """

  add to `~/.local/lib/pythonX.y/site-packages`, then results for `sys.path` will be:
    $CONDA_PREFIX/lib/python39.zip
    $CONDA_PREFIX/lib/python3.9
    $CONDA_PREFIX/lib/python3.9/lib-dynload
    $HOME/.local/lib/python3.9/site-packages
    ADDED_PATH      # <- added path, see PEP-370, thus they are in higher priority
    $CONDA_PREFIX/lib/python3.9/site-packages
  where `CONDA_PREFIX` is `$HOME/Applications/miniconda3/envs/x`

6) codes for test:
"""
import torch; torch.zeros(2).cuda(); from torch_geometric.data import Data
"""

7) envs "utils": (gcc/g++ will be installed by cuda-nvcc, add to $PATH)
"""
# aware:
# to install specific complier, e.g. `cuda-nvcc`, check: https://anaconda.org/nvidia/repo
conda install cuda-toolkit cuda-nvcc -c nvidia
conda install boost cmake make

# for gcc/g++
conda install gcc gxx
"""
## caution: new envs
# ADDR2LINE  AR  AS  NM   RNALIB  BUILD
# CC  CC_FOR_BUILD  CFLAGS
# CMAKE_ARGS  CMAKE_PREFIX_PATH
# CPP  CPPFLAGS  CXX  CXXFILT  CXXFLAGS  CXX_FOR_BUILD
# GCC  GCC_AR  GCC_NM  GCC_RANLIB  GXX
# LD  LDFLAGS  LD_GOLD
# NVCC_PREPEND_FLAGS


```
pytorch               1.11.0        cuda102py38hfdb21e3_202   conda-forge
torchvision           0.12.0        cuda102py38h6ac7867_1     conda-forge
cudatoolkit           10.2.89       hdec6ad0_12               conda-forge

torch-cluster         1.6.1         pypi_0                    pypi
torch-geometric       2.3.0         pypi_0                    pypi
torch-scatter         2.1.1         pypi_0                    pypi
torch-sparse          0.6.14        pypi_0                    pypi  # <- changed! initial is 0.6.17
torch-spline-conv     1.2.2         pypi_0                    pypi

tensorboard           2.14.0        pyhd8ed1ab_0              conda-forge
```


"""
# starting from `22.9.0`, ending by `4.14.0`, "CalVer" (Calendar Version)
# is used for version number: https://calver.org/
# in the format: YY.MM.x
Conda version       Base Python

4.7.12              2.7.17
4.10.3              3.9.7
4.10.3              3.7.7
4.12.0              3.9.12
4.14.0              3.7.12
22.9.0              3.7.12
22.9.0              3.9.13
22.9.0              3.7.16
23.1.0              3.7.13
23.1.0              3.9.12
23.1.0              3.10.9
23.3.1              3.10.10
23.5.2              3.8.17
23.7.4              3.9.18
23.11.0             3.8.18
24.1.2              3.10.13


# to avoid time cost on downloading, put the corresponding package under
# `conda info` --> "package cache"
"""


